IN
---
(1 * 1) - 1
---
OUT
---
<ast>
    <binary-expression>
        <paren>
            <binary-expression>
                <integer>1</integer>
                <operator>*</operator>
                <integer>1</integer>
            </binary-expression>
        </paren>
        <operator>-</operator>
        <integer>1</integer>
    </binary-expression>
</ast>
---

IN
---
(1 * 1) - -1
---
OUT
---
<ast>
    <binary-expression>
        <paren>
            <binary-expression>
                <integer>1</integer>
                <operator>*</operator>
                <integer>1</integer>
            </binary-expression>
        </paren>
        <operator>-</operator>
        <unary-expression>
            <operator>-</operator>
            <integer>1</integer>
        </unary-expression>
    </binary-expression>
</ast>
---

IN
---
1 * 1 - 1
---
OUT
---
<ast>
    <binary-expression>
        <binary-expression>
            <integer>1</integer>
            <operator>*</operator>
            <integer>1</integer>
        </binary-expression>
        <operator>-</operator>
        <integer>1</integer>
    </binary-expression>
</ast>
---

IN
---
1 - 1 * 1
---
OUT
---
<ast>
    <binary-expression>
        <integer>1</integer>
        <operator>-</operator>
        <binary-expression>
            <integer>1</integer>
            <operator>*</operator>
            <integer>1</integer>
        </binary-expression>
    </binary-expression>
</ast>
---

IN
---
1 * (1 - 1)
---
OUT
---
<ast>
    <binary-expression>
        <integer>1</integer>
        <operator>*</operator>
        <paren>
            <binary-expression>
                <integer>1</integer>
                <operator>-</operator>
                <integer>1</integer>
            </binary-expression>
        </paren>
    </binary-expression>
</ast>
---


IN
---
$a
---
OUT
---
<ast>
    <variable>a</variable>
</ast>
---

IN
---
name
---
OUT
---
<ast>
    <name>name</name>
</ast>
---



IN
---
$a = $x * $b
---
OUT
---
<ast>
    <binary-expression>
        <variable>a</variable>
        <operator>=</operator>
        <binary-expression>
            <variable>x</variable>
            <operator>*</operator>
            <variable>b</variable>
        </binary-expression>
    </binary-expression>
</ast>
---


IN
---
@$a->b
---
OUT
---
<ast>
    <unary-expression>
        <operator>@</operator>
        <binary-expression>
            <variable>a</variable>
            <operator>-></operator>
            <name>b</name>
        </binary-expression>
    </unary-expression>
</ast>
---

IN
---
$a = $x * $b -1
---
OUT
---
<ast>
    <binary-expression>
        <variable>a</variable>
        <operator>=</operator>
        <binary-expression>
            <binary-expression>
                <variable>x</variable>
                <operator>*</operator>
                <variable>b</variable>
            </binary-expression>
            <operator>-</operator>
            <integer>1</integer>
        </binary-expression>
    </binary-expression>
</ast>
---


IN
---
$a = $x - $b * 2
---
OUT
---
<ast>
    <binary-expression>
        <variable>a</variable>
        <operator>=</operator>
        <binary-expression>
            <variable>x</variable>
            <operator>-</operator>
            <binary-expression>
                <variable>b</variable>
                <operator>*</operator>
                <integer>2</integer>
            </binary-expression>
        </binary-expression>
    </binary-expression>
</ast>
---


IN
---
$q instanceof Name
---
OUT
---
<ast>
    <binary-expression>
        <variable>q</variable>
        <operator>instanceof</operator>
        <name>Name</name>
    </binary-expression>
</ast>
---



IN
---
! $q instanceof Name
---
OUT
---
<ast>
    <unary-expression>
        <operator>!</operator>
        <binary-expression>
            <variable>q</variable>
            <operator>instanceof</operator>
            <name>Name</name>
        </binary-expression>
    </unary-expression>
</ast>
---


IN
---
! ! false
---
OUT
---
<ast>
    <unary-expression>
        <operator>!</operator>
        <unary-expression>
            <operator>!</operator>
            <boolean>false</boolean>
        </unary-expression>
    </unary-expression>
</ast>
---


IN
---
true === !false !== !true
---
OUT
---
<ast>
    <binary-expression>
        <boolean>true</boolean>
        <operator>===</operator>
        <binary-expression>
            <unary-expression>
                <operator>!</operator>
                <boolean>false</boolean>
            </unary-expression>
            <operator>!==</operator>
            <unary-expression>
                <operator>!</operator>
                <boolean>true</boolean>
            </unary-expression>
        </binary-expression>
    </binary-expression>
</ast>
---


IN
---
!$a || $b
---
OUT
---
<ast>
    <binary-expression>
        <unary-expression>
            <operator>!</operator>
            <variable>a</variable>
        </unary-expression>
        <operator>||</operator>
        <variable>b</variable>
    </binary-expression>
</ast>
---

IN
---
!$a || $b || $c
---
OUT
---
<ast>
    <binary-expression>
        <unary-expression>
            <operator>!</operator>
            <variable>a</variable>
        </unary-expression>
        <operator>||</operator>
        <binary-expression>
            <variable>b</variable>
            <operator>||</operator>
            <variable>c</variable>
        </binary-expression>
    </binary-expression>
</ast>
---


IN
---
!$a .= $b
---
OUT
---
<ast>
    <binary-expression>
        <unary-expression>
            <operator>!</operator>
            <variable>a</variable>
        </unary-expression>
        <operator>.=</operator>
        <variable>b</variable>
    </binary-expression>
</ast>
---

IN
---
!($a || $b)
---
OUT
---
<ast>
    <unary-expression>
        <operator>!</operator>
        <paren>
            <binary-expression>
                <variable>a</variable>
                <operator>||</operator>
                <variable>b</variable>
            </binary-expression>
        </paren>
    </unary-expression>
</ast>
---


IN
---
!($a || !($b))
---
OUT
---
<ast>
    <unary-expression>
        <operator>!</operator>
        <paren>
            <binary-expression>
                <variable>a</variable>
                <operator>||</operator>
                <unary-expression>
                    <operator>!</operator>
                    <paren>
                        <variable>b</variable>
                    </paren>
                </unary-expression>
            </binary-expression>
        </paren>
    </unary-expression>
</ast>
---


IN
---
a($a, $b)
---
OUT
---
<ast>
    <call>
        <name>a</name>
        <expr-list>
            <variable>a</variable>
            <variable>b</variable>
        </expr-list>
    </call>
</ast>
---


IN
---
a($a == 1, $b == 2)
---
OUT
---
<ast>
    <call>
        <name>a</name>
        <expr-list>
            <binary-expression>
                <variable>a</variable>
                <operator>==</operator>
                <integer>1</integer>
            </binary-expression>
            <binary-expression>
                <variable>b</variable>
                <operator>==</operator>
                <integer>2</integer>
            </binary-expression>
        </expr-list>
    </call>
</ast>
---


IN
---
new a($a)
---
OUT
---
<ast>
    <call>
        <unary-expression>
            <operator>new</operator>
            <name>a</name>
        </unary-expression>
        <expr-list>
            <variable>a</variable>
        </expr-list>
    </call>
</ast>
---


IN
---
new $b($a)
---
OUT
---
<ast>
    <call>
        <unary-expression>
            <operator>new</operator>
            <variable>b</variable>
        </unary-expression>
        <expr-list>
            <variable>a</variable>
        </expr-list>
    </call>
</ast>
---


IN
---
($a . $b)($c)
---
OUT
---
<ast>
    <call>
        <paren>
            <binary-expression>
                <variable>a</variable>
                <operator>.</operator>
                <variable>b</variable>
            </binary-expression>
        </paren>
        <expr-list>
            <variable>c</variable>
        </expr-list>
    </call>
</ast>
---

IN
---
x()
---
OUT
---
<ast>
    <call>
        <name>x</name>
    </call>
</ast>
---


IN
---
(new $b)($a)
---
OUT
---
<ast>
    <call>
        <paren>
            <unary-expression>
                <operator>new</operator>
                <variable>b</variable>
            </unary-expression>
        </paren>
        <expr-list>
            <variable>a</variable>
        </expr-list>
    </call>
</ast>
---



IN
---
a($a, $b) == c((new $d)(1))
---
OUT
---
<ast>
    <binary-expression>
        <call>
            <name>a</name>
            <expr-list>
                <variable>a</variable>
                <variable>b</variable>
            </expr-list>
        </call>
        <operator>==</operator>
        <call>
            <name>c</name>
            <expr-list>
                <call>
                    <paren>
                        <unary-expression>
                            <operator>new</operator>
                            <variable>d</variable>
                        </unary-expression>
                    </paren>
                    <expr-list>
                        <integer>1</integer>
                    </expr-list>
                </call>
            </expr-list>
        </call>
    </binary-expression>
</ast>
---


IN
---
$this->call()
---
OUT
---
<ast>
    <call>
        <binary-expression>
            <variable>this</variable>
            <operator>-></operator>
            <name>call</name>
        </binary-expression>
    </call>
</ast>
---

IN
---
self::call()
---
OUT
---
<ast>
    <call>
        <binary-expression>
            <name>self</name>
            <operator>::</operator>
            <name>call</name>
        </binary-expression>
    </call>
</ast>
---

IN
---
self::$call()
---
OUT
---
<ast>
    <call>
        <binary-expression>
            <name>self</name>
            <operator>::</operator>
            <variable>call</variable>
        </binary-expression>
    </call>
</ast>
---

IN
---
\namespaced\name::$property = 10
---
OUT
---
<ast>
    <binary-expression>
        <binary-expression>
            <namespaced-name>
                <namespace>\namespaced\</namespace>
                <name>name</name>
            </namespaced-name>
            <operator>::</operator>
            <variable>property</variable>
        </binary-expression>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>
---

IN
---
\name::$property = 10
---
OUT
---
<ast>
    <binary-expression>
        <binary-expression>
            <namespaced-name>
                <namespace>\</namespace>
                <name>name</name>
            </namespaced-name>
            <operator>::</operator>
            <variable>property</variable>
        </binary-expression>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>
---

IN
---
namespaced\name::$property = 10
---
OUT
---
<ast>
    <binary-expression>
        <binary-expression>
            <namespaced-name>
                <namespace>namespaced\</namespace>
                <name>name</name>
            </namespaced-name>
            <operator>::</operator>
            <variable>property</variable>
        </binary-expression>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>
---

IN
---
$var->property = 10
---
OUT
---
<ast>
    <binary-expression>
        <binary-expression>
            <variable>var</variable>
            <operator>-></operator>
            <name>property</name>
        </binary-expression>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>
---

IN
---
$var[1]
---
OUT
---
<ast>
    <subscript>
        <variable>var</variable>
        <operator>[</operator>
        <integer>1</integer>
    </subscript>
</ast>
---


IN
---
$var[1][2]
---
OUT
---
<ast>
    <subscript>
        <subscript>
            <variable>var</variable>
            <operator>[</operator>
            <integer>1</integer>
        </subscript>
        <operator>[</operator>
        <integer>2</integer>
    </subscript>
</ast>


---
IN
---
$var[1][2]()[1]->w00t()
---
OUT
---
<ast>
    <call>
        <binary-expression>
            <subscript>
                <call>
                    <subscript>
                        <subscript>
                            <variable>var</variable>
                            <operator>[</operator>
                            <integer>1</integer>
                        </subscript>
                        <operator>[</operator>
                        <integer>2</integer>
                    </subscript>
                </call>
                <operator>[</operator>
                <integer>1</integer>
            </subscript>
            <operator>-></operator>
            <name>w00t</name>
        </binary-expression>
    </call>
</ast>
---

---
IN
---
$var[0] == 1
---
OUT
---
<ast>
    <binary-expression>
        <subscript>
            <variable>var</variable>
            <operator>[</operator>
            <integer>0</integer>
        </subscript>
        <operator>==</operator>
        <integer>1</integer>
    </binary-expression>
</ast>
---

---
IN
---
$var{0} == 1
---
OUT
---
<ast>
    <binary-expression>
        <subscript>
            <variable>var</variable>
            <operator>{</operator>
            <integer>0</integer>
        </subscript>
        <operator>==</operator>
        <integer>1</integer>
    </binary-expression>
</ast>
---

---
IN
---
$var{$var2{1}} == 1
---
OUT
---
<ast>
    <binary-expression>
        <subscript>
            <variable>var</variable>
            <operator>{</operator>
            <subscript>
                <variable>var2</variable>
                <operator>{</operator>
                <integer>1</integer>
            </subscript>
        </subscript>
        <operator>==</operator>
        <integer>1</integer>
    </binary-expression>
</ast>
---

---
IN
---
call((1 * 1) - 1)
---
OUT
---
<ast>
    <call>
        <name>call</name>
        <expr-list>
            <binary-expression>
                <paren>
                    <binary-expression>
                        <integer>1</integer>
                        <operator>*</operator>
                        <integer>1</integer>
                    </binary-expression>
                </paren>
                <operator>-</operator>
                <integer>1</integer>
            </binary-expression>
        </expr-list>
    </call>
</ast>
---

---
IN
---
@$a
---
OUT
---
<ast>
    <unary-expression>
        <operator>@</operator>
        <variable>a</variable>
    </unary-expression>
</ast>
---


---
IN
---
array(1, 2, 3)
---
OUT
---
<ast>
    <call>
        <name>array</name>
        <expr-list>
            <integer>1</integer>
            <integer>2</integer>
            <integer>3</integer>
        </expr-list>
    </call>
</ast>
---



---
IN
---
array(1, 2, 3,)
---
OUT
---
<ast>
    <call>
        <name>array</name>
        <expr-list>
            <integer>1</integer>
            <integer>2</integer>
            <integer>3</integer>
            <noop />
        </expr-list>
    </call>
</ast>
---


---
IN
---
list(,,$a)
---
OUT
---
<ast>
    <call>
        <name>list</name>
        <expr-list>
            <noop />
            <noop />
            <variable>a</variable>
        </expr-list>
    </call>
</ast>
---


---
IN
---
$$a = 10
---
OUT
---
<ast>
    <binary-expression>
        <nested-variable>
            <variable>a</variable>
        </nested-variable>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>

---

---
IN
---
${$a} = 10
---
OUT
---
<ast>
    <binary-expression>
        <nested-variable>
            <variable>a</variable>
        </nested-variable>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>

---

---
IN
---
${$a + 1} = 10
---
OUT
---
<ast>
    <binary-expression>
        <nested-variable>
            <binary-expression>
                <variable>a</variable>
                <operator>+</operator>
                <integer>1</integer>
            </binary-expression>
        </nested-variable>
        <operator>=</operator>
        <integer>10</integer>
    </binary-expression>
</ast>

---



---
IN
---
$a = function () {}
---
OUT
---
<ast>
    <binary-expression>
        <variable>a</variable>
        <operator>=</operator>
        <closure>
            <declaration>
                <params />
                <use />
            </declaration>
            <definition />
        </closure>
    </binary-expression>
</ast>
---

---
IN
---
(string)$object->property->deepproperty
---
OUT
---
<ast>
    <unary-expression>
        <operator>(string)</operator>
        <binary-expression>
            <variable>object</variable>
            <operator>-&gt;</operator>
            <binary-expression>
                <name>property</name>
                <operator>-&gt;</operator>
                <name>deepproperty</name>
            </binary-expression>
        </binary-expression>
    </unary-expression>
</ast>
---


---
IN
---
$a = (string)$object->property->deepproperty
---
OUT
---
<ast>
    <binary-expression>
        <variable>a</variable>
        <operator>=</operator>
        <unary-expression>
            <operator>(string)</operator>
            <binary-expression>
                <variable>object</variable>
                <operator>-&gt;</operator>
                <binary-expression>
                    <name>property</name>
                    <operator>-&gt;</operator>
                    <name>deepproperty</name>
                </binary-expression>
            </binary-expression>
        </unary-expression>
    </binary-expression>
</ast>
---

---
IN
---
$a->property ++
---
OUT
---
<ast>
    <unary-expression>
        <operator>++</operator>
        <binary-expression>
            <variable>a</variable>
            <operator>-&gt;</operator>
            <name>property</name>
        </binary-expression>
    </unary-expression>
</ast>
---

---
IN
---
1 ? 2 : 3
---
OUT
---
<ast>
    <ternary-expression>
        <integer>1</integer>
        <operator>?</operator>
        <integer>2</integer>
        <integer>3</integer>
    </ternary-expression>
</ast>
---

---
IN
---
$a == 1 ? 2 + 3 : 3 * 10
---
OUT
---
<ast>
    <ternary-expression>
        <binary-expression>
            <variable>a</variable>
            <operator>==</operator>
            <integer>1</integer>
        </binary-expression>
        <operator>?</operator>
        <binary-expression>
            <integer>2</integer>
            <operator>+</operator>
            <integer>3</integer>
        </binary-expression>
        <binary-expression>
            <integer>3</integer>
            <operator>*</operator>
            <integer>10</integer>
        </binary-expression>
    </ternary-expression>
</ast>
---

---
IN
---
$a == 1 ? $b == 2 ? 1 : 2 : 3
---
OUT
---
<ast>
    <ternary-expression>
        <binary-expression>
            <variable>a</variable>
            <operator>==</operator>
            <integer>1</integer>
        </binary-expression>
        <operator>?</operator>
        <ternary-expression>
            <binary-expression>
                <variable>b</variable>
                <operator>==</operator>
                <integer>2</integer>
            </binary-expression>
            <operator>?</operator>
            <integer>1</integer>
            <integer>2</integer>
        </ternary-expression>
        <integer>3</integer>
    </ternary-expression>
</ast>
---


---
IN
---
$a == 1 ? 1 : $b == 2 ? 2 : 3
---
OUT
---
<ast>
    <ternary-expression>
        <binary-expression>
            <variable>a</variable>
            <operator>==</operator>
            <integer>1</integer>
        </binary-expression>
        <operator>?</operator>
        <integer>1</integer>
        <ternary-expression>
            <binary-expression>
                <variable>b</variable>
                <operator>==</operator>
                <integer>2</integer>
            </binary-expression>
            <operator>?</operator>
            <integer>2</integer>
            <integer>3</integer>
        </ternary-expression>
    </ternary-expression>
</ast>
---


---
IN
---
"a"
---
OUT
---
<ast>
    <string>a</string>
</ast>
---

---
IN
---
"$a"
---
OUT
---
<ast>
    <string>
        <variable>a</variable>
    </string>
</ast>
---

---
IN
---
"a [$a] a"
---
OUT
---
<ast>
    <string>
        <string>a [</string>
        <variable>a</variable>
        <string>] a</string>
    </string>
</ast>
---

---
IN
---
"a [${a}] a"
---
OUT
---
<ast>
    <string>
        <string>a [</string>
        <variable>a</variable>
        <string>] a</string>
    </string>
</ast>
---

---
IN
---
"a [{$a}] a"
---
OUT
---
<ast>
    <string>
        <string>a [</string>
        <variable>a</variable>
        <string>] a</string>
    </string>
</ast>
---

---
IN
---
"a [{$a->property}] a"
---
OUT
---
<ast>
    <string>
        <string>a [</string>
        <binary-expression>
            <variable>a</variable>
            <operator>-&gt;</operator>
            <name>property</name>
        </binary-expression>
        <string>] a</string>
    </string>
</ast>
---

---
IN
---
'\\'
---
OUT
---
<ast>
    <string>\\</string>
</ast>
---

